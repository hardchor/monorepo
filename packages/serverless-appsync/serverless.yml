tenant: hardchor
app: monorepo
service: ${self:app}-serverless-appsync

plugins:
  - serverless-appsync-plugin
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: eu-west-1

custom:
  resourcePrefix: ${self:provider.stage}MonorepoServerlessAppsync
  accountId: #{AWS::AccountId}
  appSync:
    name: ${self:custom.resourcePrefix}Api
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY or AWS_IAM or AMAZON_COGNITO_USER_POOLS or OPENID_CONNECT
    # if AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId:
        Ref: CognitoUserPool
      playgroundClientId:
        Ref: CognitoUserPoolClient
      # appIdClientRegex: # optional
    schema: schema.graphql # Input GraphQL Schema
    logConfig:
      # loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ERROR # Logging Level: NONE | ERROR | ALL
    mappingTemplatesLocation: src/mappingTemplates # defaults to mapping-templates
    mappingTemplates:
      - dataSource: usersTable
        type: Query
        field: getUserInfo
        request: 'getUserInfo-request-mapping-template.txt'
        response: 'getUserInfo-response-mapping-template.txt'
      - dataSource: usersTable
        type: Query
        field: meInfo
        request: 'meInfo-request-mapping-template.txt'
        response: 'meInfo-response-mapping-template.txt'
      - dataSource: usersTable
        type: Mutation
        field: updateUserInfo
        request: 'updateUserInfo-request-mapping-template.txt'
        response: 'updateUserInfo-response-mapping-template.txt'
    serviceRole: '${self:custom.resourcePrefix}AppSyncServiceRole'
    dataSources:
      - type: AMAZON_DYNAMODB
        name: usersTable
        description: 'Users table'
        config:
          tableName: { Ref: UserTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }

resources:
  Resources:
    # DynamoDB
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          - AttributeName: handle
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: handle
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: '${self:custom.resourcePrefix}Users'
    # DynamoDB service roles
    AppSyncDynamoDBServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: '${self:custom.resourcePrefix}AppSyncServiceRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: '${self:custom.resourcePrefix}AppSyncDynamoDBServiceRolePolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'dynamodb:Query'
                    - 'dynamodb:BatchWriteItem'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:DeleteItem'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:Scan'
                    - 'dynamodb:UpdateItem'
                  Resource:
                    - { Fn::GetAtt: [UserTable, Arn] }
                    - { Fn::Join: ['/', [{ Fn::GetAtt: [UserTable, Arn] }, '*']] }

    # Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.resourcePrefix}UserPool
    # Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.resourcePrefix}UserPoolClient
        UserPoolId:
          Ref: CognitoUserPool
    # Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.resourcePrefix}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.resourcePrefix}AppAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: '${self:custom.resourcePrefix}CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'
                - Effect: 'Allow'
                  Action:
                    - 'execute-api:Invoke'
                  Resource: '*'
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.resourcePrefix}AppUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': unauthenticated
        Policies:
          - PolicyName: '${self:custom.resourcePrefix}CognitoUnauthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'
